25.7.28
Went back to work so progress will slow. Today I added some nice movement to the players with
acceleraton and friction, though it does need some tuning. Ball is still moving of its own accord
without any consideration for player position, so I'll need to add that soon. Dabbled with some
motion equations -- such memories!
- Accomplishments: added nice smooth movements to the players based on user input.

25.7.26
The game is taking the shape of Pong. Today it was mostly a lot of refactoring both for
architecture and code style. We should be in decent shape now. I do hate C++ imports though, and
how you could be importing stuff through some header other so your file doesn't have all the
necessary, and then it bites you in the ass later on. There must be some linter to check this, but
I've been too lazy to check so far.
- Accomplishments: ball starts moving in a random direction when I press the spacebar and it
  bounces off the walls forever.

25.7.25
Short and sweet today. I reorganized the code a bit to avoid bloat of the main engine class. I also
noticed that I was getting a beep every time I used a key, especially if I held it down. It turns
out that if the framework (SwiftUI/AppKit) doesn't interpret a key as handled, the system will play
that sound by default. By not propagating the keyDown event (i.e. not calling super.keyDown) the
beep is gone.
- Accomplishments: no more beep!

25.7.24
Learned about CMakeLists as well as more efficient ways of linkng the macOS project with the core
library. Also made some improvements to the engine to make it look nicer.
- Accomplishments: much cleaner project structure and faster iteration speed.

25.7.23
Added performance calculations to get the interval between frames, and started using to calculate
movement speed. Now I can have constant and uniform movement when keys are pressed, regardless of
window size and frame rate. This also required drawing the moving rectangle using position and size
relative to the window size instead of absolute.
- Accomplishments: instead of just picking between 9 static positions based on input, the rectangle
  moves around and updates its persistent state so it can be "driven" around the window.

25.7.22
Worked on input event piping. I'm not 100% confident on the timing and synchronization, but it
seems to work so far. Still no GPU rendering -- that'll come soon.
- Accomplishments: rendered square controlled by inputs (mouse and key presses).

25.7.21
Got a lot done today. Got the C++ engine connected to the macOS platform code and moved the frame
rendering code there. However I couldn't figure out a way to compile and build everything together,
so I had to build the engine first and then copy the header and library over every time. I created
a Makefile to make the library build easier, and then wrote a script to automatically update the
library within the macOS project.
- Accomplishments: C++-side rendering and streamlined build system.

25.7.20
Added a Metal renderer to gain access to a pixel buffer, with the framework handling the actual
rendering. This took a while because I have no idea how any of this works, and had to translate
the Win32 ideas into macOS, figure out the right framework to use (or at least _a_ framework to
use) and get it to work with some trial and error. Gemini is my best friend.
- Accomplishments: add a view that renders a pixel buffer and displays the correct colors.

25.7.18
The tutorial I'm following (check it out:
https://www.youtube.com/playlist?list=PL7Ej6SUky135IAAR3PFCFyiVwanauRqj3) is based on Win32, but
I'm developing on my Mac so that doesn't make iterating easy. Spent some time learning about
SwiftUI and set up a simple app.
- Accomplishments: display a resizable window that can receive and log input events.
